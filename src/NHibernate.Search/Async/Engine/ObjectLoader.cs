//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;

namespace NHibernate.Search.Engine
{
    using System.Threading.Tasks;
    using System.Threading;
    public partial class ObjectLoader : ILoader
    {

        #region ILoader Members

        public async Task<object> LoadAsync(EntityInfo entityInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            object maybeProxy = await (session.GetAsync(entityInfo.Clazz, entityInfo.Id, cancellationToken));
            // TODO: Initialize call and error trapping
            try
            {
                await (NHibernateUtil.InitializeAsync(maybeProxy, cancellationToken));
            }
            catch (OperationCanceledException) { throw; }
            catch (Exception e)
            {
                if (LoaderHelper.IsObjectNotFoundException(e))
                {
                    log.Debug("Object found in Search index but not in database: "
                              + entityInfo.Clazz + " wih id " + entityInfo.Id);
                    maybeProxy = null;
                }
                else
                    throw;
            }

            return maybeProxy;
        }

        public async Task<IList> LoadAsync(EntityInfo[] entityInfos, CancellationToken cancellationToken = default(CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            // Use load to benefit from the batch-size
            // We don't face proxy casting issues since the exact class is extracted from the index
            foreach (EntityInfo entityInfo in entityInfos) // TODO: Why do this?
            {
                await (session.LoadAsync(entityInfo.Clazz, entityInfo.Id, cancellationToken));
            }

            ArrayList result = new ArrayList(entityInfos.Length);

            foreach (EntityInfo entityInfo in entityInfos)
            {
                try
                {
                    object entity = await (session.LoadAsync(entityInfo.Clazz, entityInfo.Id, cancellationToken));
                    await (NHibernateUtil.InitializeAsync(entity, cancellationToken));
                    result.Add(entity);
                }
                catch (OperationCanceledException) { throw; }
                catch (Exception e)
                {
                    if (LoaderHelper.IsObjectNotFoundException(e))
                    {
                        log.Warn("Object found in Search index but not in database: "
                                  + entityInfo.Clazz + " wih id " + entityInfo.Id);
                    }
                    else
                        throw;
                }
            }

            return result;
        }

        #endregion
    }
}