//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using NHibernate.Transform;

namespace NHibernate.Search.Engine
{
    using System.Threading.Tasks;
    using System.Threading;
    public partial class ProjectionLoader : ILoader
    {

        #region Private methods

        #endregion
        #region Public methods

        public async Task<object> LoadAsync(EntityInfo entityInfo, CancellationToken cancellationToken = default(CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            InitThisProjectionFlag(entityInfo);
            if (projectThis == true)
            {
                foreach (int index in entityInfo.IndexesOfThis)
                {
                    entityInfo.Projection[index] = await (objectLoader.LoadAsync(entityInfo, cancellationToken));
                }
            }

            return transformer != null
                       ? transformer.TransformTuple(entityInfo.Projection, aliases)
                       : entityInfo.Projection;
        }

        public async Task<IList> LoadAsync(EntityInfo[] entityInfos, CancellationToken cancellationToken = default(CancellationToken))
        {
            cancellationToken.ThrowIfCancellationRequested();
            IList results = new ArrayList(entityInfos.Length);
            if (entityInfos.Length == 0) return results;

            InitThisProjectionFlag(entityInfos[0]);
            if (projectThis == true)
            {
                await (objectLoader.LoadAsync(entityInfos, cancellationToken)); // Load by batch
                foreach (EntityInfo entityInfo in entityInfos)
                {
                    foreach (int index in entityInfo.IndexesOfThis)
                    {
                        //set one by one to avoid loosing null objects (skipped in the objectLoader.load( EntityInfo[] ))
                        entityInfo.Projection[index] = await (objectLoader.LoadAsync(entityInfo, cancellationToken));
                    }
                }
            }
            foreach (EntityInfo entityInfo in entityInfos)
            {
                if (transformer != null)
                    results.Add(transformer.TransformTuple(entityInfo.Projection, aliases));
                else
                    results.Add(entityInfo.Projection);
            }

            return results;
        }


        #endregion
    }
}