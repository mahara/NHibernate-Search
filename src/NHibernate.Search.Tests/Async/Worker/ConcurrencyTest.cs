//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using System.Collections.Generic;
using NUnit.Framework;

namespace NHibernate.Search.Tests.Worker
{
    using System.Threading.Tasks;
    [TestFixture]
    public class ConcurrencyTestAsync : SearchTestCase
    {
        protected override IEnumerable<string> Mappings
        {
            get { return new string[] { "Worker.Drink.hbm.xml", "Worker.Food.hbm.xml" }; }
        }

        [Test]
        public async Task MultipleEntitiesInSameIndexAsync()
        {
            ISession s = OpenSession();
            ITransaction tx = s.BeginTransaction();
            Drink d = new Drink();
            d.Name = "Water";
            Food f = new Food();
            f.Name = "Bread";
            await (s.SaveAsync(d));
            await (s.SaveAsync(f));
            await (tx.CommitAsync());
            s.Close();

            s = OpenSession();
            tx = s.BeginTransaction();
            d = await (s.GetAsync<Drink>(d.Id));
            d.Name = "Coke";
            f = await (s.GetAsync<Food>(f.Id));
            f.Name = "Cake";
            try
            {
                await (tx.CommitAsync());
            }
            catch // TODO: This Commit() succeeds, so I wonder why there is a try/catch
            {
                //Check for error logs from JDBCTransaction
            }
            s.Close();

            s = OpenSession();
            tx = s.BeginTransaction();
            d = await (s.GetAsync<Drink>(d.Id));
            await (s.DeleteAsync(d));
            f = await (s.GetAsync<Food>(f.Id));
            await (s.DeleteAsync(f));
            await (tx.CommitAsync());
            s.Close();
        }
    }
}